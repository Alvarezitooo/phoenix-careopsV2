"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/chat/page",{

/***/ "(app-pages-browser)/./hooks/useChat.ts":
/*!**************************!*\
  !*** ./hooks/useChat.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/uiCopy */ \"(app-pages-browser)/./lib/uiCopy.ts\");\n/* __next_internal_client_entry_do_not_use__ useChat auto */ \n\n// Helper pour gérer les erreurs de l'API\nasync function getApiErrorMessage(error) {\n    if (error.response) {\n        try {\n            var _data_error;\n            const data = await error.response.json();\n            const errorCode = (_data_error = data.error) === null || _data_error === void 0 ? void 0 : _data_error.code;\n            if (errorCode && _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__.uiCopy.errors[errorCode]) {\n                return _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__.uiCopy.errors[errorCode];\n            }\n        } catch (e) {\n            // Le corps de la réponse n'est pas un JSON valide\n            return _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__.uiCopy.errors.UNKNOWN_ERROR;\n        }\n    }\n    if (error.message.includes(\"Failed to fetch\")) {\n        return _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__.uiCopy.errors.network;\n    }\n    return _lib_uiCopy__WEBPACK_IMPORTED_MODULE_1__.uiCopy.errors.UNKNOWN_ERROR;\n}\nfunction useChat() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { userId, autoLoadHistory = true, userContext } = options;\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        messages: [],\n        isLoading: false,\n        error: null,\n        connectionStatus: \"disconnected\"\n    });\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // 📜 Charger l'historique au montage\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoLoadHistory && userId) {\n            loadChatHistory();\n        }\n    }, [\n        userId,\n        autoLoadHistory\n    ]);\n    // 📜 Charger historique conversation\n    const loadChatHistory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!userId) {\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    connectionStatus: \"disconnected\"\n                }));\n            return;\n        }\n        try {\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: true,\n                    connectionStatus: \"connecting\"\n                }));\n            const response = await fetch(\"/api/chat/history?userId=\".concat(userId));\n            if (!response.ok) {\n                throw {\n                    response\n                }; // Lancer l'objet réponse pour analyse\n            }\n            const data = await response.json();\n            setState((prev)=>({\n                    ...prev,\n                    messages: data.messages || [],\n                    isLoading: false,\n                    connectionStatus: \"connected\",\n                    error: null\n                }));\n        } catch (error) {\n            console.error(\"Erreur chargement historique:\", error);\n            const errorMessage = await getApiErrorMessage(error);\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    connectionStatus: \"disconnected\",\n                    error: errorMessage\n                }));\n        }\n    }, [\n        userId\n    ]);\n    // 💬 Envoyer un message\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (content)=>{\n        if (!content.trim() || state.isLoading || !userId) {\n            return;\n        }\n        // Annuler requête précédente si elle existe\n        if (abortControllerRef.current) {\n            abortControllerRef.current.abort();\n        }\n        abortControllerRef.current = new AbortController();\n        // Message utilisateur immédiat\n        const userMessage = {\n            id: \"user-\".concat(Date.now()),\n            role: \"user\",\n            content: content.trim(),\n            timestamp: new Date().toISOString()\n        };\n        setState((prev)=>({\n                ...prev,\n                messages: [\n                    ...prev.messages,\n                    userMessage\n                ],\n                isLoading: true,\n                error: null\n            }));\n        try {\n            // 🔐 Récupérer le token Supabase depuis les cookies\n            const { supabase } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\"));\n            const { data: { session } } = await supabase.auth.getSession();\n            const token = session === null || session === void 0 ? void 0 : session.access_token;\n            if (!token) {\n                throw new Error(\"Session expir\\xe9e\");\n            }\n            const response = await fetch(\"/api/chat/message\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \".concat(token) // 🔐 Ajouter le token\n                },\n                body: JSON.stringify({\n                    message: content.trim(),\n                    userId,\n                    context: userContext // Envoyer le contexte utilisateur\n                }),\n                signal: abortControllerRef.current.signal\n            });\n            if (!response.ok) {\n                throw {\n                    response\n                }; // Lancer l'objet réponse pour analyse\n            }\n            const data = await response.json();\n            // Message assistant avec données RAG\n            const assistantMessage = {\n                id: \"assistant-\".concat(Date.now()),\n                role: \"assistant\",\n                content: data.response || data.answer,\n                timestamp: data.timestamp,\n                sources: data.sources || [],\n                processing_time: data.processing_time || 0,\n                suggestions: data.suggestions || []\n            };\n            setState((prev)=>({\n                    ...prev,\n                    messages: [\n                        ...prev.messages,\n                        assistantMessage\n                    ],\n                    isLoading: false,\n                    connectionStatus: \"connected\"\n                }));\n        } catch (error) {\n            if (error.name === \"AbortError\") {\n                return; // Requête annulée volontairement\n            }\n            console.error(\"Erreur envoi message:\", error);\n            const errorMessage = await getApiErrorMessage(error);\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    connectionStatus: \"disconnected\",\n                    error: errorMessage\n                }));\n        }\n    }, [\n        userId,\n        state.isLoading\n    ]);\n    // 🔄 Reset conversation\n    const resetConversation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        if (!userId) {\n            return;\n        }\n        try {\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: true\n                }));\n            const response = await fetch(\"/api/chat/reset\", {\n                method: \"DELETE\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    userId\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Erreur lors de la r\\xe9initialisation\");\n            }\n            setState((prev)=>({\n                    ...prev,\n                    messages: [],\n                    isLoading: false,\n                    error: null\n                }));\n        } catch (error) {\n            console.error(\"Erreur reset:\", error);\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    error: error.message\n                }));\n        }\n    }, [\n        userId\n    ]);\n    // 🧠 Sauvegarder un souvenir important\n    const saveMemory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function(memory) {\n        let type = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"important\";\n        if (!userId) {\n            return false;\n        }\n        try {\n            const response = await fetch(\"/api/chat/memory\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    userId,\n                    memory,\n                    type\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Erreur sauvegarde m\\xe9moire\");\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Erreur sauvegarde m\\xe9moire:\", error);\n            return false;\n        }\n    }, [\n        userId\n    ]);\n    // 📄 Analyser un document\n    const analyzeDocument = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (document, documentType)=>{\n        if (!userId) {\n            return null;\n        }\n        try {\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: true\n                }));\n            const response = await fetch(\"/api/chat/analyze-document\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    document,\n                    userId,\n                    documentType\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Erreur analyse document\");\n            }\n            const data = await response.json();\n            // Ajouter résultat d'analyse comme message\n            const analysisMessage = {\n                id: \"analysis-\".concat(Date.now()),\n                role: \"assistant\",\n                content: \"\\uD83D\\uDCC4 **Analyse de votre document :**\\n\\n\".concat(data.analysis, \"\\n\\n**Suggestions :**\\n\").concat(data.suggestions.map((s)=>\"• \".concat(s)).join(\"\\n\")),\n                timestamp: new Date().toISOString()\n            };\n            setState((prev)=>({\n                    ...prev,\n                    messages: [\n                        ...prev.messages,\n                        analysisMessage\n                    ],\n                    isLoading: false\n                }));\n            return data;\n        } catch (error) {\n            console.error(\"Erreur analyse document:\", error);\n            setState((prev)=>({\n                    ...prev,\n                    isLoading: false,\n                    error: error.message\n                }));\n            return null;\n        }\n    }, [\n        userId\n    ]);\n    // 🔄 Retry dernière action en cas d'erreur\n    const retry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (state.messages.length > 0) {\n            const lastUserMessage = [\n                ...state.messages\n            ].reverse().find((m)=>m.role === \"user\");\n            if (lastUserMessage) {\n                // Supprimer les messages d'erreur et relancer\n                setState((prev)=>({\n                        ...prev,\n                        messages: prev.messages.filter((m)=>!m.id.startsWith(\"error-\")),\n                        error: null\n                    }));\n                sendMessage(lastUserMessage.content);\n            }\n        }\n    }, [\n        state.messages,\n        sendMessage\n    ]);\n    return {\n        // State\n        messages: state.messages,\n        isLoading: state.isLoading,\n        error: state.error,\n        connectionStatus: state.connectionStatus,\n        // Actions\n        sendMessage,\n        resetConversation,\n        saveMemory,\n        analyzeDocument,\n        loadChatHistory,\n        retry,\n        // Utils\n        isEmpty: state.messages.length === 0,\n        lastMessage: state.messages[state.messages.length - 1] || null\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useChat.ts\n"));

/***/ })

});