# ===================================
# üöÄ DOCKERFILE PHOENIXCARE - FASTAPI
# ===================================
# Multi-stage build optimis√© pour Railway
# Python 3.11 + FastAPI + Uvicorn

# ===== STAGE 1: BUILD =====
FROM python:3.11-slim as builder

WORKDIR /app

# Installation des d√©pendances syst√®me pour build
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copier requirements et installer dans un venv
COPY requirements.txt .
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Installation des packages Python
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt


# ===== STAGE 2: RUNTIME =====
FROM python:3.11-slim

WORKDIR /app

# Copier le venv depuis le stage builder (FIX du probl√®me Railway/Nixpacks!)
COPY --from=builder /opt/venv /opt/venv

# Copier tout le code de l'application
COPY . .

# Activer le venv pour tous les process
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1

# Port expos√© (Railway utilise $PORT dynamique)
EXPOSE 8080

# ===== HEALTHCHECK =====
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health', timeout=3)"

# ===== COMMANDE DE D√âMARRAGE =====
# Railway va automatiquement injecter $PORT
# Utilise python -m pour √©viter les probl√®mes de permissions
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "4", "--log-level", "info"]
