#!/usr/bin/env python3
"""
üöÄ D√âMARRAGE SIMPLE PHOENIXCARE üöÄ
Version simplifi√©e pour test imm√©diat avec Gemini
"""

import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime
import logging

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Test simple Gemini sans d√©pendances complexes
async def test_gemini_connection():
    """Test basique de connexion Gemini"""
    try:
        import google.generativeai as genai
        from dotenv import load_dotenv

        # Chargement des variables d'environnement
        load_dotenv()

        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            logger.error("‚ùå GEMINI_API_KEY non trouv√©e!")
            return False

        # Configuration Gemini
        genai.configure(api_key=api_key)

        generation_config = {
            "temperature": 0.3,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 2000,  # Plus de tokens pour r√©ponses d√©taill√©es
        }

        model = genai.GenerativeModel(
            model_name="models/gemini-2.5-flash",
            generation_config=generation_config,
            system_instruction="""Tu es PhoenixIA, assistant expert en droit du handicap fran√ßais.
Tu aides les parents d'enfants en situation de handicap avec des informations pr√©cises et bienveillantes."""
        )

        # Test de g√©n√©ration
        logger.info("üß™ Test de g√©n√©ration avec Gemini...")

        response = model.generate_content("""
Qu'est-ce que l'AEEH (Allocation d'√âducation de l'Enfant Handicap√©) ?
R√©ponds de mani√®re claire et bienveillante en fran√ßais.
""")

        if response.text:
            logger.info("‚úÖ Gemini fonctionne parfaitement!")
            logger.info(f"üìù R√©ponse g√©n√©r√©e ({len(response.text)} caract√®res)")
            logger.info(f"üí¨ Aper√ßu: {response.text[:200]}...")
            return True
        else:
            logger.error("‚ùå R√©ponse vide de Gemini")
            return False

    except Exception as e:
        logger.error(f"‚ùå Erreur Gemini: {e}")
        return False

async def create_sample_knowledge_base():
    """Cr√©e une base de connaissances simple en m√©moire"""

    knowledge_base = {
        "aeeh": {
            "title": "Allocation d'√âducation de l'Enfant Handicap√© (AEEH)",
            "content": """
L'AEEH est une allocation destin√©e √† compenser les frais d'√©ducation et de soins d'un enfant handicap√©.

CONDITIONS:
- Enfant de moins de 20 ans
- Taux d'incapacit√© d'au moins 80% OU entre 50% et 80% avec fr√©quentation √©tablissement sp√©cialis√©

MONTANT 2024:
- Base: 149,26 ‚Ç¨ par mois
- Compl√©ments possibles de 107,36 ‚Ç¨ √† 1 239,27 ‚Ç¨

D√âMARCHES:
1. Dossier MDPH avec formulaire Cerfa 15692
2. Certificat m√©dical r√©cent
3. Pi√®ces justificatives
            """,
            "keywords": ["aeeh", "allocation", "√©ducation", "enfant", "handicap√©"]
        },

        "pch": {
            "title": "Prestation de Compensation du Handicap (PCH)",
            "content": """
La PCH finance les aides humaines, techniques, d'am√©nagement du logement et du v√©hicule.

CONDITIONS:
- Limitation absolue ou grave d'au moins une fonction
- √Çge entre 20 et 60 ans (extensions possibles)
- R√©sidence stable en France

√âL√âMENTS:
1. Aide humaine: 17,70 ‚Ç¨/heure en emploi direct
2. Aides techniques: plafond 13 200 ‚Ç¨ sur 10 ans
3. Am√©nagement logement: plafond 10 000 ‚Ç¨ sur 10 ans
4. Transport: plafond 5 000 ‚Ç¨ sur 5 ans

D√âMARCHE: Dossier MDPH obligatoire
            """,
            "keywords": ["pch", "prestation", "compensation", "handicap"]
        },

        "aesh": {
            "title": "Accompagnant d'√âl√®ves en Situation de Handicap (AESH)",
            "content": """
L'AESH favorise l'autonomie de l'√©l√®ve handicap√© √† l'√©cole.

TYPES:
- AESH individuel (AESH-i)
- AESH mutualis√© (AESH-m)
- AESH collectif en ULIS

MISSIONS:
1. Accompagnement des apprentissages
2. Accompagnement vie sociale et relationnelle
3. Accompagnement actes de la vie quotidienne

DUR√âE: Notification de 1 √† 3 ans, renouvelable

D√âMARCHE: Demande via dossier MDPH, √©valuation besoins, d√©cision CDAPH
            """,
            "keywords": ["aesh", "accompagnant", "√©cole", "scolarisation", "√©l√®ve"]
        }
    }

    logger.info(f"üìö Base de connaissances cr√©√©e: {len(knowledge_base)} documents")
    return knowledge_base

def find_relevant_documents(query: str, knowledge_base: dict) -> list:
    """Recherche simple dans la base de connaissances"""
    query_lower = query.lower()
    relevant_docs = []

    for doc_id, doc in knowledge_base.items():
        # Score simple bas√© sur les mots-cl√©s
        score = 0
        for keyword in doc["keywords"]:
            if keyword in query_lower:
                score += 1

        # Score bas√© sur le contenu
        content_words = query_lower.split()
        for word in content_words:
            if len(word) > 3 and word in doc["content"].lower():
                score += 0.5

        if score > 0:
            relevant_docs.append({
                "id": doc_id,
                "title": doc["title"],
                "content": doc["content"],
                "score": score
            })

    # Tri par score d√©croissant
    relevant_docs.sort(key=lambda x: x["score"], reverse=True)
    return relevant_docs[:3]  # Top 3

async def test_qa_system():
    """Test du syst√®me de questions/r√©ponses complet"""

    logger.info("\nüí¨ TEST SYST√àME Q/A COMPLET")
    logger.info("-" * 35)

    # Cr√©ation base de connaissances
    knowledge_base = await create_sample_knowledge_base()

    # Import Gemini
    import google.generativeai as genai
    from dotenv import load_dotenv

    load_dotenv()
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

    model = genai.GenerativeModel(
        model_name="models/gemini-2.5-flash",
        generation_config={"temperature": 0.3, "max_output_tokens": 2000},
        system_instruction="""Tu es PhoenixIA, assistant expert en droit du handicap fran√ßais.
Tu r√©ponds de mani√®re empathique et pr√©cise en te basant sur les documents fournis."""
    )

    # Questions de test
    test_questions = [
        "Qu'est-ce que l'AEEH ?",
        "Comment faire une demande AEEH ?",
        "Quel est le montant de l'AEEH en 2024 ?",
        "Mon enfant autiste de 8 ans peut-il avoir une AESH ?",
        "Qu'est-ce que la PCH ?"
    ]

    for i, question in enumerate(test_questions, 1):
        logger.info(f"\n[{i}/{len(test_questions)}] ‚ùì {question}")

        try:
            # Recherche documents pertinents
            relevant_docs = find_relevant_documents(question, knowledge_base)

            if relevant_docs:
                logger.info(f"üìñ {len(relevant_docs)} documents trouv√©s")

                # Construction du prompt avec contexte
                context = "\n\n".join([
                    f"DOCUMENT: {doc['title']}\n{doc['content']}"
                    for doc in relevant_docs
                ])

                prompt = f"""
CONTEXTE (documents juridiques PhoenixCare):
{context}

QUESTION: {question}

INSTRUCTIONS:
- R√©ponds en fran√ßais de mani√®re empathique et accessible
- Base ta r√©ponse sur les documents fournis
- Cite tes sources quand pertinent
- Structure ta r√©ponse clairement
- Si l'info n'est pas dans les documents, dis-le

R√âPONSE:"""

                # G√©n√©ration avec Gemini
                response = model.generate_content(prompt)

                if response.text:
                    logger.info(f"‚úÖ R√©ponse g√©n√©r√©e ({len(response.text)} caract√®res)")

                    # Affichage de la r√©ponse
                    print(f"\nüí¨ PhoenixIA r√©pond:\n{response.text}\n")

                else:
                    logger.warning("‚ö†Ô∏è R√©ponse vide")

            else:
                logger.warning("‚ö†Ô∏è Aucun document pertinent trouv√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur: {e}")

        await asyncio.sleep(1)  # Pause entre questions

async def main():
    """Fonction principale de test PhoenixCare"""

    print("üöÄ PHOENIXCARE - TEST SIMPLE AVEC GEMINI")
    print("=" * 45)

    # Test 1: Connexion Gemini
    logger.info("üîß Test 1: Connexion Gemini")
    gemini_ok = await test_gemini_connection()

    if not gemini_ok:
        logger.error("‚ùå Impossible de continuer sans Gemini")
        return

    # Test 2: Syst√®me Q/A complet
    logger.info("\nüß† Test 2: Syst√®me Questions/R√©ponses")
    await test_qa_system()

    # Rapport final
    print("\n" + "="*50)
    print("üéâ TEST PHOENIXCARE TERMIN√â!")
    print("="*50)
    print("""
‚úÖ R√âSULTATS:
  - Gemini 1.5 Flash: Fonctionnel
  - Base de connaissances: 3 documents (AEEH, PCH, AESH)
  - Recherche contextuelle: Op√©rationnelle
  - G√©n√©ration r√©ponses: Optimis√©e

üéØ PROCHAINES √âTAPES:
  1. PhoenixCare est pr√™t pour utilisation!
  2. Int√©gration frontend disponible
  3. Extension base documentaire possible

üí∞ CO√õT ESTIM√â:
  - Test complet: ~0.001‚Ç¨ (ultra-√©conomique!)
  - 1000 questions/mois: ~1-2‚Ç¨
    """)

if __name__ == "__main__":
    asyncio.run(main())